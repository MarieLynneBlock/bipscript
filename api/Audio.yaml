#
# This file is part of Bipscript.
#
# Bipscript is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bipscript is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bipscript.  If not, see <http://www.gnu.org/licenses/>.
#

name : Audio

interfaces:

    - name: Source
      cppname: AudioSource
      include: audioconnection
      methods:
        - name: output
          cppname: getAudioConnection
          parameters: { name: channel, type: integer }
          returns: Audio.Output

    - name: Sink
      methods:
        - name: connect
          parameters:
            - { name: source, type: Audio.Source }
        - name: connect
          parameters:
            - { name: output, type: Audio.Output }

classes :

    - name: Mixer
      interface:
        - Audio.Source
        #- Midi.Sink
      include: mixer
      ctor:
        parameters:
          - {name: inputs, type: integer}
          - {name: outputs, type: integer}
        expression: MixerCache::instance().getMixer
      methods:
        - name: addGainController
          parameters:
            - { name: source, type: Midi.Source }
            - { name: control, type: integer }
            - { name: input, type: integer }
            - { name: output, type: integer }

        - name: connect
          parameters:
            - {name: source, type: Audio.Source}
            - {name: gain, type: float, optional: true}

        - name: connect
          parameters:
            - {name: source, type: Audio.Source}
            - {name: gains, type: array, optional: true}

        - name: scheduleGain
          parameters:
            - { name: input, type: integer }
            - { name: output, type: integer }
            - { name: gain, type: float}
            - { name: bar, type: integer}
            - { name: position, type: integer}
            - { name: division, type: integer}

    - name: OnsetDetector
      interface:
        - Audio.Sink
      include: onsetdetector
      ctor:
        parameters: { name: type, type: string, optional: true }
        expression: OnsetDetectorCache::instance().getOnsetDetector
      methods:
      - name: onOnset
        parameters:
          - { name: handler, type: function }
      - name: threshold
        cppname: setThreshold
        parameters:
        - { name: threshold, type: float }
      - name: silence
        cppname: setSilence
        parameters:
        - { name: threshold, type: float }

    - name: Output
      cppname: AudioConnection

    - name: SystemOut
      interface:
        - Audio.Sink
      cppname: AudioOutputPort
      include:
        - audioport
        - audioengine
      ctor:
        parameters:
        - { name: name, type: string }
        - { name: connection, type: string, optional: true }
        expression: AudioOutputPortCache::instance().getAudioOutputPort

    - name: SystemIn
      interface:
        - Audio.Source
      cppname: AudioInputPort
      include:
        - audioport
      ctor:
        parameters:
        - { name: name, type: string }
        - { name: connection, type: string, optional: true }
        expression: AudioInputPortCache::instance().getAudioInputPort

    - name: StereoIn
      interface:
        - Audio.Source
      cppname: AudioStereoInput
      include: audioport
      ctor:
        parameters:
          - { name: name, type: string }
          - { name: connectLeft, type: string }
          - { name: connectRight, type: string }

    - name: StereoOut
      interface:
        - Audio.Sink
      cppname: AudioStereoOutput
      include: audioport
      ctor:
        parameters:
          - { name: name, type: string }
          - { name: connectLeft, type: string }
          - { name: connectRight, type: string }


    - name: BeatTracker
      interface:
        - Audio.Sink
      include: beattracker
      ctor:
        parameters: { name: bpm, type: float }
        expression: BeatTrackerCache::instance().getBeatTracker


