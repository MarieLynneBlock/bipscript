#
# This file is part of Bipscript.
#
# Bipscript is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bipscript is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bipscript.  If not, see <http://www.gnu.org/licenses/>.
#

name : Midi

classes :

    - name: ABCReader
      include: abcreader
      ctor: {}
      methods:
        - name: read
          returns: Midi.Pattern
          parameters:
            - {name: abc, type: string}
            - {name: key, type: string, optional: true }
            - {name: noteLength, type: string, optional: true }
            - {name: meter, type: string, optional: true }
            - {name: rhythm, type: string, optional: true }
        - name: readTune
          returns: Midi.Tune
          parameters:
            - {name: abc, type: string}

    - name: ChordReader
      include: chordreader
      ctor: {}
      methods:
        - name: read
          returns: Midi.Pattern
          parameters:
            - { name: chord, type: string }
            - {name: duration, type: integer}
            - {name: division, type: integer}

    - name: DrumTabReader
      include: drumtabreader
      ctor: {}
      methods:
      - name: read
        returns: Midi.Pattern
        parameters: {name: tab, type: string}
      - name: setVelocity
        parameters:
          - {name: pitch, type: integer}
          - {name: code, type: string}
          - {name: velocity, type: integer}

    - name: Input
      cppname: MidiInputPort
      super: EventSource
      include: midiport
      ctor:
        parameters:
          - {name: name, type: string}
          - {name: connection, type: string, optional: true}
        expression: MidiInputPortCache::instance().getMidiInputPort

    - name: Note
      include: module_midi
      ctor:
        parameters:
          - {name: pitch, type: integer}
          - {name: velocity, type: integer}
          - {name: duration, type: integer}
          - {name: division, type: integer}
      methods:
        - name: transpose
          parameters:
            - {name: amount, type: integer}
        - name: velocity
          parameters:
            - {name: value, type: integer, optional: true}
        - name: getPitch
          returns: integer

    - name: Control
      ctor:
        parameters:
          - {name: control, type: integer}
          - {name: value, type: integer}

    - name: InputBuffer
      cppname: MidiInputBuffer
      include: midiinputbuffer
      ctor:
        parameters: {name: source, type: EventSource}
        expression: MidiInputBufferCache::instance().getMidiInputBuffer

      methods:
        - name: lastControlValue
          returns: integer
          parameters:
            - {name: control, type: integer}

    - name: MMLReader
      include: mmlreader
      ctor: {}
      methods:
        - name: read
          returns: Midi.Pattern
          parameters:
            - {name: mml, type: string}

    - name: Pattern
      ctor:
        parameters:
        - { name: other, type: Midi.Pattern, optional: true}
      methods:
        - name: add
          parameters:
            - {name: note, type: Midi.Note}
            - {name: bar, type: integer}
            - {name: position, type: integer}
            - {name: division, type: integer}
          cppname: addNote
        - name: size
          returns: integer
        - name: note
          parameters: {name: index, type: integer}
          returns: Midi.Note
          cppname: getNote
        - name: print
        - name: transpose
          parameters:
            - {name: amount, type: integer}

    - name: Tune
      cppname: MidiTune
      include: miditune
      methods:
        - name: getTimeSignature
          returns: Transport.TimeSignature
        - name: getTitle
          returns: string
        - name: getTrackCount
          returns: integer
        - name: getTrack
          returns: Midi.Pattern
          parameters:
            - {name: number, type: integer}

    - name: Output
      cppname: MidiOutputPort
      ctor:
        parameters:
          - { name: name, type: string }
          - { name: connection, type: string, optional: true }
        expression: MidiOutputPortCache::instance().getMidiOutputPort
      methods:
      - name: midiChannel
        parameters: {name: channel, type: integer, optional: true }
        returns: integer
      - name: schedule
        parameters:
          - {name: note, type: Midi.Note}
          - {name: bar, type: integer}
          - {name: position, type: integer}
          - {name: division, type: integer}
      - name: schedule
        parameters:
          - {name: pattern, type: Midi.Pattern}
          - {name: bar, type: integer}
      - name: schedule
        parameters:
          - {name: control, type: Midi.Control}
          - {name: bar, type: integer}
          - {name: position, type: integer}
          - {name: division, type: integer}
      - name: schedule
        parameters:
          - {name: control, type: Midi.ProgramChange}
          - {name: bar, type: integer}
          - {name: position, type: integer}
          - {name: division, type: integer}

    - name: PitchBend
      ctor:
        parameters:
          - {name: program, type: integer}

    - name: ProgramChange
      ctor:
        parameters:
          - {name: program, type: integer}

    - name: BeatTracker
      cppname: MidiBeatTracker
      include: beattracker
      ctor:
        parameters:
          - { name: bpm, type: float }
          - { name: numerator, type: integer, optional: true }
          - { name: denominator, type: integer, optional: true }
        expression: MidiBeatTrackerCache::instance().getMidiBeatTracker
      methods:
        - name: connectMidi
          parameters:
            - { name: source, type: EventSource }
        - name: countIn
          parameters:
            - { name: note, type: integer }
        - name: onCount
          parameters:
            - { name: handler, type: function }
        - name: setNoteWeight
          parameters:
            - { name: note, type: integer }
            - { name: weight, type: float }
        - name: stopOnSilence
          parameters:
            - { name: seconds, type: integer }
